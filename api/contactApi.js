import{BASE_URL,myFunction}from"./baseApi.js";export const getAllContacts=async(t,e)=>{try{const n=await fetch(`${BASE_URL}/contact?page=${t}&limit=${e}`,{method:"GET",headers:{"Content-Type":"application/json"},credentials:"include"});if(!n.ok)throw new Error(`HTTP error! Status: ${n.status}`);return await n.json()}catch(t){return console.error("Error fetching contacts:",t),null}};export const getContactById=async t=>{try{const e=await fetch(`${BASE_URL}/contact/${t}`,{method:"GET",headers:{"Content-Type":"application/json"},credentials:"include"});if(!e.ok)throw new Error(`HTTP error! Status: ${e.status}`);return await e.json()}catch(t){return console.error("Error fetching contact:",t),null}};export const createContact=async t=>{try{const e=await fetch(`${BASE_URL}/contact`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!e.ok)throw new Error(`HTTP error! Status: ${e.status}`);return await e.json()}catch(t){return console.error("Error creating contact:",t),null}};export const updateContactById=async(t,e)=>{try{const n=await fetch(`${BASE_URL}/contact/${t}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e),credentials:"include"});if(!n.ok)throw new Error(`HTTP error! Status: ${n.status}`);return await n.json()}catch(t){return console.error("Error updating contact:",t),null}};export const deleteContactById=async t=>{try{const e=await fetch(`${BASE_URL}/contact/${t}`,{method:"DELETE",headers:{"Content-Type":"application/json"},credentials:"include"});if(!e.ok)throw new Error(`HTTP error! Status: ${e.status}`);return await e.json()}catch(t){return console.error("Error deleting contact:",t),null}};const page=1,limit=8;let currentPage=1,totalPages=1;const fetchData=async(t,e,n=1)=>{console.log({page:n});const o=document.getElementById(e);o.innerHTML="",console.log(t,e,n);try{if("contact"===t){const t=await getAllContacts(n,8);populateContactsTable(o,t),updatePaginationControls("contact-pagination-container",t.currentPage,t.totalPages)}}catch(e){console.error(`Error fetching ${t}:`,e)}},updatePaginationControls=(t,e,n)=>{console.log(e,n,"updatePaginationControls");const o=document.getElementById(t);if(o.innerHTML="",e>1){const t=document.createElement("button");t.textContent="<",t.classList.add("btn","btn-secondary","btn-sm","me-2"),t.addEventListener("click",(()=>{fetchData("contact","contacts-container",e-1)})),o.appendChild(t)}const a=document.createElement("span");if(a.textContent=`Page ${e} of ${n}`,a.classList.add("pagination-info","ms-3"),o.appendChild(a),e<n){const t=document.createElement("button");t.textContent=">",t.classList.add("btn","btn-secondary","btn-sm","ms-2"),t.addEventListener("click",(()=>{fetchData("contact","contacts-container",e+1)})),o.appendChild(t)}};export const populateContactsTable=(t,e)=>{const{currentPage:n,totalPages:o}=e;console.log(n,o),currentPage=n,totalPages=o,updatePaginationControls("contact-pagination-container",n,o),e.data.forEach((e=>{const n=document.createElement("tr");n.innerHTML=`\n      <td>${e.name}</td>\n      <td>${e.email}</td>\n      <td>${e.phone}</td>\n      <td>${e.message}</td>\n    `,t.appendChild(n)}))};export const handleSubmitContactForm=async t=>{t.preventDefault();const e=document.getElementById("contactName").value,n=document.getElementById("contactEmail").value,o=document.getElementById("contactPhone").value,a=document.getElementById("contactMessage").value;console.log(e,n,o,a);try{await createContact({name:e,email:n,phone:o,message:a}),document.getElementById("contactName").value="",document.getElementById("contactEmail").value="",document.getElementById("contactPhone").value="",document.getElementById("contactMessage").value="",myFunction(),fetchData("contacts","contacts-container",currentPage)}catch(t){console.error("Error handling contact form submission:",t)}};document.addEventListener("DOMContentLoaded",(()=>{document.getElementById("contactForm").addEventListener("submit",(t=>{handleSubmitContactForm(t)})),fetchData("contact","contacts-container",currentPage)}));